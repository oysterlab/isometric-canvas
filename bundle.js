(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FFT = function () {
    function FFT() {
        _classCallCheck(this, FFT);

        this.audio = new Audio();
        this.context = new AudioContext();
        this.frequencyData = [];
    }

    _createClass(FFT, [{
        key: 'load',
        value: function load(audioFile) {
            var _this = this;

            var FFT_SIZE = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1024;

            var this_ = this;
            return new Promise(function (resolve) {
                var audio = _this.audio,
                    context = _this.context;

                var analyser = context.createAnalyser();
                var source = context.createMediaElementSource(audio);

                source.connect(analyser);
                analyser.connect(context.destination);
                analyser.fftSize = FFT_SIZE * 2;

                audio.removeEventListener('ended', this_.start);
                audio.addEventListener('ended', this_.start);

                audio.onloadeddata = function () {
                    setTimeout(function () {
                        this_.start();
                        this_.analyser = analyser;
                        this_.frequencyData = new Uint8Array(analyser.frequencyBinCount);
                        resolve();
                    }, 500);
                };

                audio.src = audioFile;
            });
        }
    }, {
        key: 'getFrequency',
        value: function getFrequency() {
            var analyser = this.analyser,
                frequencyData = this.frequencyData;

            if (analyser) analyser.getByteFrequencyData(frequencyData);
            return frequencyData;
        }
    }, {
        key: 'start',
        value: function start() {
            var audio = this.audio;

            audio.currentTime = 0;
            audio.play();
        }
    }]);

    return FFT;
}();

exports.default = FFT;

},{}],2:[function(require,module,exports){
'use strict';

var _FFT = require('./FFT');

var _FFT2 = _interopRequireDefault(_FFT);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.body.style.padding = '0px';
document.body.style.maring = '0px';

var fft = new _FFT2.default();
fft.load('./resources/Ezun+-+Revager+(Original+Mix)+-+Master.mp3', 128).then(function () {});

var WIDTH = window.innerWidth;
var HEIGHT = window.innerHeight;
var canvas = document.createElement('canvas');
canvas.width = WIDTH;
canvas.height = HEIGHT;
document.body.appendChild(canvas);

var context = canvas.getContext('2d');

var DIGONAL_SIZE = 16; // must be odd number

var w = WIDTH > HEIGHT ? HEIGHT / parseInt(DIGONAL_SIZE * 1.8) : WIDTH / parseInt(DIGONAL_SIZE * 1.8);
var h = WIDTH > HEIGHT ? HEIGHT / parseInt(DIGONAL_SIZE * 1.8) : WIDTH / parseInt(DIGONAL_SIZE * 1.8);
var BLOCK_MAX_HEIGHT = h * 2;
var p1 = [0. * w, -0.5 * h];
var p2 = [1. * w, 0. * h];
var p3 = [0. * w, 0.5 * h];
var p4 = [-1. * w, 0. * h];

var blocks = [];
var countMap = {};
for (var r = 0; r <= DIGONAL_SIZE; r++) {
  var t = Math.sin(r / DIGONAL_SIZE * Math.PI).toFixed(2);
  var colCount = countMap[t];

  if (!colCount) {
    var countArr = Object.keys(countMap).map(function (key) {
      return countMap[key];
    });
    countMap[t] = countArr.length == 0 ? 1 : Math.max.apply(null, countArr) + 1;
    colCount = countMap[t];
  }

  var sc = w * 0.5 - colCount * w;
  for (var c = 0; c < colCount; c++) {
    blocks.push({
      x: sc + c * w * 2, y: r * h * 0.5
    });
  }
}

var prevAvg = 0;
var render = function render(t) {
  var frequency = fft.getFrequency();

  context.clearRect(0, 0, WIDTH, HEIGHT);
  context.fillStyle = '#000';
  context.fillRect(0, 0, WIDTH, HEIGHT);

  var clusterPositions = [{
    x: WIDTH * 0.5 + w * 0.5, y: HEIGHT * 0.5 - h * 3.
  }];

  clusterPositions.forEach(function (cp, j) {

    context.save();
    context.translate(cp.x, cp.y);

    var sum = 0;
    blocks.forEach(function (_ref, i) {
      var x = _ref.x,
          y = _ref.y;

      var f = Math.abs(Math.sin(0.8 * Math.PI * i / blocks.length + t * 0.004)) * 0.001;
      if (frequency.length > 0) {
        f += frequency[i + 20] / 128;
        sum += frequency[i + 20] / 128;
      }

      var r = 100 + Math.sqrt(f * 0.3) * 150; //parseInt(Math.random() * 255)
      var g = 50 - Math.sqrt(f * 0.1) * 70; //parseInt(Math.random() * 255)
      var b = 50 - Math.sqrt(f * 0.1) * 70; //parseInt(Math.random() * 255)

      var h = -(BLOCK_MAX_HEIGHT * 0.1) - BLOCK_MAX_HEIGHT * Math.pow(f + 0.5, 2) * 0.5;

      var m = 0; //parseInt(-(1. - r) * 20)

      context.beginPath();
      context.moveTo(x + p1[0], y + p1[1] + h);
      context.lineTo(x + p2[0], y + p2[1] + h);
      context.lineTo(x + p3[0], y + p3[1] + h);
      context.lineTo(x + p4[0], y + p4[1] + h);
      context.closePath();
      context.fillStyle = 'rgb(' + (r + m) + ', ' + (g + m) + ', ' + (b + m) + ')';
      context.fill();

      context.beginPath();
      context.moveTo(x + p3[0], y + p3[1] + h);
      context.lineTo(x + p4[0], y + p4[1] + h);
      context.lineTo(x + p4[0], y + p4[1]);
      context.lineTo(x + p3[0], y + p3[1]);
      context.closePath();
      context.fillStyle = 'rgb(' + (r - 10 + m) + ', ' + (g - 10 + m) + ', ' + (b - 10 + m) + ')';
      context.fill();

      context.beginPath();
      context.moveTo(x + p2[0], y + p2[1] + h);
      context.lineTo(x + p2[0], y + p2[1]);
      context.lineTo(x + p3[0], y + p3[1]);
      context.lineTo(x + p3[0], y + p3[1] + h);
      context.closePath();
      context.fillStyle = 'rgb(' + (r + 10 + m) + ', ' + (g + 10 + m) + ', ' + (b + 10 + m) + ')';
      context.fill();
    });
    prevAvg = sum / blocks.length;
    context.restore();
  });

  requestAnimationFrame(render);
};

requestAnimationFrame(render);

},{"./FFT":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
